[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this site",
    "section": "",
    "text": "My answers to the Advent of Code 2022 Edition"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code 2022",
    "section": "",
    "text": "This is my ongoing journal as I try to complete the 2022 Edition of the Advent of Code\nMy goal is not to get the highest amount of stars, but Iâ€™ll be happy to complete the 50 stars which would mean I solved all the problems.\nMy primary objective (aside from solving the problem) is to try to solve the problems as professionally as possible. e.g."
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Advent of Code 2022",
    "section": "Links",
    "text": "Links\n\nGithub Repo - contains the code solution to get the answers\nMy Advent of Code 2022 Solutions - the answers are hidden by default but you can view it by clicking on the answer tab for each part\nAdvent of Code"
  },
  {
    "objectID": "index.html#tech-stack",
    "href": "index.html#tech-stack",
    "title": "Advent of Code 2022",
    "section": "Tech stack",
    "text": "Tech stack\n\npython\npytest\nquarto\nnbdev"
  },
  {
    "objectID": "exercises/day11.html",
    "href": "exercises/day11.html",
    "title": "Day 11",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day11/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['Monkey 0:',\n '  Starting items: 92, 73, 86, 83, 65, 51, 55, 93',\n '  Operation: new = old * 5',\n '  Test: divisible by 11',\n '    If true: throw to monkey 3',\n '    If false: throw to monkey 4',\n '',\n 'Monkey 1:',\n '  Starting items: 99, 67, 62, 61, 59, 98',\n '  Operation: new = old * old',\n '  Test: divisible by 2',\n '    If true: throw to monkey 6',\n '    If false: throw to monkey 7',\n '',\n 'Monkey 2:',\n '  Starting items: 81, 89, 56, 61, 99',\n '  Operation: new = old * 7',\n '  Test: divisible by 5',\n '    If true: throw to monkey 1',\n '    If false: throw to monkey 5',\n '',\n 'Monkey 3:',\n '  Starting items: 97, 74, 68',\n '  Operation: new = old + 1',\n '  Test: divisible by 17',\n '    If true: throw to monkey 2',\n '    If false: throw to monkey 5',\n '',\n 'Monkey 4:',\n '  Starting items: 78, 73',\n '  Operation: new = old + 3',\n '  Test: divisible by 19',\n '    If true: throw to monkey 2',\n '    If false: throw to monkey 3',\n '',\n 'Monkey 5:',\n '  Starting items: 50',\n '  Operation: new = old + 5',\n '  Test: divisible by 7',\n '    If true: throw to monkey 1',\n '    If false: throw to monkey 6',\n '',\n 'Monkey 6:',\n '  Starting items: 95, 88, 53, 75',\n '  Operation: new = old + 8',\n '  Test: divisible by 3',\n '    If true: throw to monkey 0',\n '    If false: throw to monkey 7',\n '',\n 'Monkey 7:',\n '  Starting items: 50, 77, 98, 85, 94, 56, 89',\n '  Operation: new = old + 2',\n '  Test: divisible by 13',\n '    If true: throw to monkey 4',\n '    If false: throw to monkey 0']\n\n\n\nGenerate list of monkeys\nhave them run rounds\ncompute monkey business\nFinally the answer for part 1 given the input\n\n\nmonkeys = list(generate_monkeys(input, divisor=3))\nmonkeys = run_rounds(monkeys)\nmbusiness = monkey_business(monkeys)\n\n\nprint(f'the correct answer for part 1 is {mbusiness}')\n\nthe correct answer for part 1 is 120756"
  },
  {
    "objectID": "exercises/day11.html#part-2",
    "href": "exercises/day11.html#part-2",
    "title": "Day 11",
    "section": "Part 2",
    "text": "Part 2\n\nlcm = extract_lcm(input)\nmonkeys = list(generate_monkeys(input,modulo=lcm, divisor=1))\nmonkeys = run_rounds(monkeys, rounds=10_000)\nprint('done!')\n\ndone!\n\n\n\nmbusiness2 = monkey_business(monkeys)\nprint(f'the correct answer for part 2 is {mbusiness2}')\n\nthe correct answer for part 2 is 39109444654"
  },
  {
    "objectID": "exercises/day1.html",
    "href": "exercises/day1.html",
    "title": "Day1",
    "section": "",
    "text": "Read in input file contain list of calories\n\n\nwith open(\"day1/input1.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['13399',\n '13677',\n '11945',\n '9861',\n '6484',\n '4257',\n '',\n '6616',\n '7349',\n '7758',\n '1591',\n '6068',\n '9217',\n '6924',\n '6766',\n '',\n '10040',\n '9088',\n '11305',\n '5867',\n '10766',\n '9996',\n '11092',\n '',\n '1320',\n '4921',\n '2338',\n '1351',\n '3462',\n '5916',\n '3124',\n '1416',\n '3655',\n '4886',\n '1135',\n '5171',\n '5020',\n '5099',\n '4785',\n '',\n '1702',\n '5083',\n '3852',\n '3361',\n '2505',\n '3767',\n '1069',\n '3564',\n '3189',\n '5950',\n '2250',\n '2053',\n '1639',\n '1430',\n '4586',\n '',\n '4135',\n '7033',\n '4649',\n '3126',\n '1136',\n '1435',\n '3825',\n '2205',\n '1259',\n '5473',\n '1803',\n '6406',\n '',\n '2466',\n '30094',\n '',\n '3122',\n '2983',\n '5988',\n '4214',\n '5278',\n '1974',\n '7109',\n '2419',\n '3777',\n '8299',\n '',\n '10191',\n '6122',\n '7298',\n '7855',\n '8666',\n '4777',\n '6833',\n '8862',\n '',\n '6100',\n '5332',\n '1908',\n '2796',\n '1818',\n '4657',\n '1650',\n '5560']\n\n\n\nCreate a generator that returns the totals each time it iterates\n\n\n\n\n\n\n\n generate_totals (input:list[str])\n\nGenerate totals from an input string consisting of lines where each line is an integer and delimited by an empty line\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\nlist of strings each containing an int or empty line\n\n\nReturns\ntyping.Generator[int, NoneType, NoneType]\n\n\n\n\n\n\n\n\nsample = ['1','1','','2','3']\npprint(list(generate_totals(sample)))\n\n[2, 5]\n\n\n\nCreate a function that sums the top n\n\n\n\n\n\n\n\n sum_top_n (input:list[str], n:int)\n\nSum top n of totals for the highest n totals\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\nlist of strings each containing an int or empty line\n\n\nn\nint\ntop n count\n\n\n\n\n\n\n\nFor each sequence of numbers punctuated by an empty line, sum up calories for each\nIf sum of calories is greater than current max, set that as the current max\n\n\nsample = ['1','1','','3','','1','','2','','4','','5']\nmax_calories = sum_top_n(sample,1)\nprint(max_calories)\n\n5\n\n\n\nmax_calories = sum_top_n(sample,3)\nprint(max_calories)\n\n12\n\n\n\nFinally the answer for the top 1 given the input\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\nmax_calories = sum_top_n(input, 1)\nprint(f'the correct answer for part 1 is {max_calories}')\n\nthe correct answer for part 1 is 75622"
  },
  {
    "objectID": "exercises/day1.html#part-2",
    "href": "exercises/day1.html#part-2",
    "title": "Day1",
    "section": "Part 2",
    "text": "Part 2\n\nPart 2 is now easy, since we can handle top n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\nmax_calories = sum_top_n(input, 3)\nprint(f'the correct answer for part 2 is {max_calories}')\n\nthe correct answer for part 2 is 213159"
  },
  {
    "objectID": "exercises/day8.html",
    "href": "exercises/day8.html",
    "title": "Day 8",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day8/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['133120320210233440424211425033311533112110111336536142004454550513525522325223123404213204010312200',\n '201131111014211324423255354022022243226445013613610423653614522135534505055120330313403031333103010',\n '312033232323231244025301315245341424106564334260061464515142114141551050411122254121204214442432210',\n '101223224313414001513045124413405604251532415616200623342234245060512030200002055453441222043022132',\n '302000022010423415300513533001221654231646352603366222420353100303160621313144421120541324031322221',\n '022041343104313414435021243154525050055065506466215004364316065443031303052541012204020300331224312',\n '103341401201343234101335152026143021665443260024145323023321363412215203352344024010350241320230403',\n '113420142141151035404302242616255522460104100534576523546245441245051223305614204355454223220120301',\n '141313120334140413444311032422155464031057323373712672513175353623531154646460010504312302300002224',\n '222122233241135333145102102244620325637577115357373355166254434732406430504542404102101335430322111',\n '303334221050505214133200215501142243567431213624743475716112467711442460620524310041114411011423020',\n '314200333004550151023253063621162447552734266222424315622125733562141045411643325165010440012411104',\n '002041023423222500521530364652321342767176666734452465675417573276212213343035032650010252311440041',\n '424112310115314154624123026322722176144615437667237551164455332134452657635041110204303331153310423',\n '403331525242111322464321027125164326531546671615634451453753666614652523355664316050035035431040223',\n '043240150545010061116502263626227235517673287377662722735257631252161774623714640414211242003124031',\n '120153432445266666010553121747235535567222344854553227754373283562766712275433030145041514430322020',\n '130205252451225625553367153422361135376345652238658565468884466665635712475577163231554521534443142',\n '111112125502543266131422234726554665525278247588365447865236325776254766323137341434403365242323513',\n '303144132003506154604725457356146262354554756268227328243768455722852644644163423635454133132303535',\n '355321430425362320027571672735837582654822875282477453446323242873743335342262324741355251635040132',\n '134315335666154514547724226424352647855667536237263286847676436882327536177762242121655513144251300',\n '540433012152253201644772517187257277883368828477658659796427367852347254442546347411045431414354124',\n '123440236041532033152645165666552487887293658447738333978367787858534683322123676621510536503333401',\n '513523462114216537146475772264724378429935336847846348444575554346687726237537112655265045664650022',\n '152254463440132245722174776775434287876777476649865634494799993998688326736773121545343121065304241',\n '250224151321236513227671833576566739347663376834388478944395578563955424353347453672417622666244155',\n '515223301360505722213752783545553644495694566664938776366634393433784855746658113613537562051065554',\n '554241245610333147211334537367835857366454575934899676895788946595666473766285253431355325406031452',\n '100314521636253352672223432738853968767459797559486648888395749643933624738538781345525612342532041',\n '341462234622615555235573736647638675877393747847457878744844899855446378852378466172227414636330202',\n '345125124225634624432677378235488673587578945954767695474694483979633396738646725252521775306550112',\n '413420352557414334236458423883348897736674897485778466695756868398399557654674634472471146623221025',\n '251143521254271126368347667353953675589776644454498798849645686658369675764886773874127564444411365',\n '221413142252611772737673846553885549867478965666795885777985495763559573589863845361134756354652555',\n '243065641366675316826485533843887969469458797465896675796454946875597936434758642384462157714462066',\n '520553502161266638252882759578566955579648578498775589886979787578896857766344736358531725733564135',\n '424035430516117723442423478595343855468789497988556567558494878666699996375768427758374271236421335',\n '252313015177661777278432468494855844559656687766987679695575558744879656544795683583262246546564621',\n '066230444571526644743382974447835556985988567697575656976987588986595376466888728567376162756500435',\n '466346066733165454546438886894789699679455689766757985688888664759568963398874674733715475614334101',\n '325014552177542688745486585579599747867559596676796865787567755944786444539663262282351475561402534',\n '241163303516225237353826934978454869995779765759887659668665685578986859343646684568651136735352562',\n '450361264326612736655359595445797648876877955597997887987765775498545883744548752574473726565411112',\n '554605215356217343577344399893857478777797855566878769757669857854854856357865565536552164136515351',\n '526446641376374684266375494495458695869978975788699978669887967564769488567376982882762633361324360',\n '131314671231526545866684867949989786895865986986978678997899677764988874736369482822342624761635224',\n '623254034413371684428636874768586849979569867987768799666579796798469744978968758623884477174221325',\n '451620621666445477562568544366499474968796999686779676678989576768596484478933764745243527321126622',\n '454130052341168772645439448775675586969558878998779766779998798589986885955369648636673756137543515',\n '052463667567627485865289577459895546659595768687867979887989666587865576357344373227477771625616331',\n '460630633631764266522893997758984967975685969969798677679989558694657986684466928784764257141450213',\n '624130637644652532575536775488944945689777797679988979876565896659695947897698966634635115577122034',\n '312106635521463635433584476586795448766769568869779667989675669974989668369378542526764316562641343',\n '162151455625714643563689555468449898859656786796979798687579985864586658783373657585741615177725655',\n '522113305657225658843435489885646557577988797667968888669868768989959977879557377455733555272325032',\n '304510566333111422674633384687874565587979787768979689685867565897484896499888736286384551117254613',\n '501463041455354857783745556844585568845776985978966685877875599798784456633539465754543114144204310',\n '033044042511137887672349889484876755578886688778959586777755687684946795536886522746575472552603266',\n '506221035322726455557224463853355996897775558969955685797667999588974556935495475632746634441041151',\n '433136161743725565262636565676447685475989796568778598958657768879849778786859753335661722543205305',\n '265454361556653132263478888989675487694888975877759959776785674478666588788563747772733262666414514',\n '052441631644734262283652379957577654769979687765967795697668686969788694345962866843241632716655446',\n '236003436545632166356247457495793686988694668988898785686844466844799668333966735544674562633412352',\n '521460600027621624875854349394389587767654998655578976768847769685597639387383648267451531624063352',\n '342222114334344716267243334967869638699594976567878976765649455495834476654882454551336614731204621',\n '033566313156263553885434364795389663465876465857797479766958478858465479967473865454116236530266023',\n '312652012603144155543338267594667756579949844587785799854455597889659839838335338227724422251205254',\n '300006533237512225736566526838475448787546947968579975977675656694697397732838257677271224106345603',\n '133143326544516157647526755363599347754745759889457964588954897669586537634253625642342472416641244',\n '154255220262671713413357272553997888597745494647794956965689397737688378433337485552276212554465555',\n '100240040401314462336283253854484757937369955476776566463546476496874852334852883176722554655020500',\n '114224164252562264455188387248845988369836588899857935337746669656565572827235667727764740332042104',\n '210035410165643165676172383567428973379998596753776399638478657839665546428878531777515004325230423',\n '210124643010215635561443542385838474565467799589387569934754637575772733563765332372676641151131504',\n '302221012422133674231332744234367852633548864367379437949776375866557752335873376756770315423300102',\n '332125266633066263556242566636554222886478446383395355568773939525563625678526672212234343222625410',\n '025325451166410144267526457225543863563576656495967865696633785745578788783545643421165350000423343',\n '002055431510265615765734547166486528454663847694453963495886284323368575223225414276066312104153401',\n '355245141260142612771253626632378444477523462347872628387736452238277834561572523626005254261254042',\n '203545210065351052363237141625823577635472367448676276452678742864237273162112414622640501555430121',\n '335510044411666505051763342712375473385677658477545568853568734655885763312211631300144242225254322',\n '420503535251235101224431771412136627846753333256668624663675776462422374227471570160056336045543305',\n '311442220344522144201454355125161416822475756464544562823568565277363143626236634605524051151344323',\n '221042430004563020306242752654674353744234455564453257548654537765566764222366445225313642034222311',\n '410315020300414623613025143245525766347157877736466252545465214236744364172443246502214503112203230',\n '342304354225251006345461616171626576425171512572743837515273314522745717111151266035240243530314400',\n '101402542354002125435251304674647534521162334775342133371111747561164265140621412560624450505304430',\n '011211315525203435452400223603127166746242764515517634515312173434163762164444142306041434112503201',\n '312201041521122523410120106532007714457744313215145447526753371116262403622123305243410143403304001',\n '420143230433241404304622552610552657576751252637557577175144676122663421114064036341501055504120312',\n '321114124142324224151525015553652243236362311234247651266113535462142056365353412114023231401141232',\n '144010233331150422332523034411415500511027722375253755262514425243333354512150011301540445044301243',\n '321223141143321313415515024451144622413543514327723454716501265226013550620005111202312303242203422',\n '220312222242043544521300416060642531526303363025212311016020154415132623214322110011054242222314401',\n '120043213410140522500232142235034335033562221102412305131143065020436150033340525535242031300403012',\n '333011210021031104353104420453564321600565055235040060414452305642301521213234000231332120021102311',\n '213000422032423433105500120521112552552162045443040565055142555024614151234210022135411312102303010',\n '311113213314300134505043355233124354500023350433035532626242646113034040102425400244311432332422101']\n\n\n\nwith open(\"day8/sample.txt\") as f:\n    samples = f.read().splitlines()\n\n\n[print(s) for s in samples];\n\n30373\n25512\n65332\n33549\n35390\n\n\n\nsample_grid = init_grid(samples)\nsample_visibles = count_visible(sample_grid)\nprint(f'sample visible count: {sample_visibles}')\n\nsample visible count: 21\n\n\n\nFinally the answer for part 1\n\n\ngrid = init_grid(input)\nvisibles = count_visible(grid)\n\nprint(f'the correct answer for part 1 is {visibles}')\n\nthe correct answer for part 1 is 1703"
  },
  {
    "objectID": "exercises/day8.html#part-2",
    "href": "exercises/day8.html#part-2",
    "title": "Day 8",
    "section": "Part 2",
    "text": "Part 2\n\nmax_scenic_score = highest_scenic_score(grid)\nprint(f'the correct answer for part 2 is {max_scenic_score}')\n\nthe correct answer for part 2 is 496650"
  },
  {
    "objectID": "exercises/day7.html",
    "href": "exercises/day7.html",
    "title": "Day 7",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day7/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['$ cd /',\n '$ ls',\n '282959 btm',\n 'dir fmfnpm',\n 'dir gwlwp',\n 'dir hchp',\n '275929 hmbbjbf',\n 'dir nsphznf',\n 'dir phschqg',\n '193293 rhpwvff',\n 'dir spfwthmd',\n 'dir wchdqb',\n 'dir zlpmfh',\n '191479 zlpmfh.gpt',\n '$ cd fmfnpm',\n '$ ls',\n 'dir fgtqvq',\n '194704 fwdvgnqp.fsm',\n '48823 fwdwq.tsq',\n '224991 mtjngt',\n '79386 rdsgpfjb.sfn',\n 'dir rvnwwfq',\n 'dir wrzcjwc',\n 'dir zlpmfh',\n '$ cd fgtqvq',\n '$ ls',\n '293783 rjc.ncl',\n '324635 wdjrhw',\n '$ cd ..',\n '$ cd rvnwwfq',\n '$ ls',\n '76914 btm',\n '$ cd ..',\n '$ cd wrzcjwc',\n '$ ls',\n 'dir fwdwq',\n '2159 fzb.tjs',\n 'dir lddhdslh',\n 'dir mjp',\n '284475 vclnlds',\n '196284 zjtftd',\n '$ cd fwdwq',\n '$ ls',\n '120795 jqnl.hzj',\n '$ cd ..',\n '$ cd lddhdslh',\n '$ ls',\n '293030 fzb',\n 'dir gzj',\n '$ cd gzj',\n '$ ls',\n 'dir qzgsswr',\n '$ cd qzgsswr',\n '$ ls',\n '33681 qzgsswr.wmv',\n '121649 sbjbw.shv',\n '$ cd ..',\n '$ cd ..',\n '$ cd ..',\n '$ cd mjp',\n '$ ls',\n '289491 btm',\n '169221 jqnl.hzj',\n '$ cd ..',\n '$ cd ..',\n '$ cd zlpmfh',\n '$ ls',\n '189296 ldgpvnh',\n '$ cd ..',\n '$ cd ..',\n '$ cd gwlwp',\n '$ ls',\n 'dir dwcrnbj',\n 'dir fmfnpm',\n 'dir fwdwq',\n 'dir hzpsts',\n 'dir hzrq',\n 'dir jzwpjtf',\n 'dir lmmpmghg',\n 'dir mnw',\n 'dir qzgsswr',\n 'dir zlpmfh',\n '$ cd dwcrnbj',\n '$ ls',\n '182989 btm',\n '145822 fwdvgnqp.fsm',\n 'dir jbtfslcn',\n 'dir lgbglc',\n '293584 mfstl.hhp',\n 'dir sbffqq',\n 'dir zhvn',\n '$ cd jbtfslcn',\n '$ ls',\n '195255 sbjbw.shv',\n '$ cd ..',\n '$ cd lgbglc',\n '$ ls',\n '261423 fmfnpm.rqh',\n '323530 fzb.lmm',\n '314800 hbl.blm']\n\n\n\nwith open(\"day7/sample.txt\") as f:\n    samples = f.read().splitlines()\n\n\nCreate a function that processes the commands\nTest function on the sample data\n\n\nsample_nodes = process_commands(samples)\nsample_lnodes = fc.L(sample_nodes)\nsample_tsize = sample_lnodes.attrgot(\"size\").filter(lambda o: o < 100_000).sum()\n\nprint(f'the  answer for samples  is {sample_tsize}')\n\nthe  answer for samples  is 95437\n\n\n\nFinally the total of all the directories sized below 100_000 is:\n\n\nnodes = process_commands(input)\nlnodes = fc.L(nodes)\ntsize = lnodes.attrgot(\"size\").filter(lambda o: o < 100_000).sum()\n\nprint(f'the correct answer for part 1 is {tsize}')\n\nthe correct answer for part 1 is 1491614"
  },
  {
    "objectID": "exercises/day7.html#part-2",
    "href": "exercises/day7.html#part-2",
    "title": "Day 7",
    "section": "Part 2",
    "text": "Part 2\n\nCompute the free space (for the sample)\n\n\nsample_free_space = 70_000_000 - sample_lnodes.attrgot(\"size\")[0]\nprint(sample_free_space)\n\n21618835\n\n\n\nCompute the space need to delete (for the sample)\n\n\nsample_need_to_delete = 30_000_000 - sample_free_space\nprint(sample_need_to_delete)\n\n8381165\n\n\n\nFind the smallest size of the directories sized greater than the space needed to be deleted\n\n\nsample_delete_size = min(sample_lnodes.attrgot(\"size\").filter(lambda o: o >= sample_need_to_delete))\nprint(sample_delete_size)\n\n24933642\n\n\n\nFor the answer to part 2, run the same calculations\n\n\nfree_space = 70_000_000 - lnodes.attrgot(\"size\")[0]\nprint(free_space)\n\n23909866\n\n\n\nneed_to_delete = 30_000_000 - free_space\nprint(need_to_delete)\n\n6090134\n\n\n\ndelete_size = min(lnodes.attrgot(\"size\").filter(lambda o: o >= need_to_delete))\n\nprint(f'the correct answer for part 2 is {delete_size}')\n\nthe correct answer for part 2 is 6400111"
  },
  {
    "objectID": "exercises/day5.html",
    "href": "exercises/day5.html",
    "title": "Day 5",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day5/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['    [M]             [Z]     [V]    ',\n '    [Z]     [P]     [L]     [Z] [J]',\n '[S] [D]     [W]     [W]     [H] [Q]',\n '[P] [V] [N] [D]     [P]     [C] [V]',\n '[H] [B] [J] [V] [B] [M]     [N] [P]',\n '[V] [F] [L] [Z] [C] [S] [P] [S] [G]',\n '[F] [J] [M] [G] [R] [R] [H] [R] [L]',\n '[G] [G] [G] [N] [V] [V] [T] [Q] [F]',\n ' 1   2   3   4   5   6   7   8   9 ',\n '',\n 'move 6 from 9 to 3',\n 'move 2 from 2 to 1',\n 'move 1 from 8 to 2',\n 'move 3 from 7 to 2',\n 'move 7 from 6 to 9',\n 'move 1 from 9 to 5',\n 'move 3 from 5 to 7',\n 'move 6 from 8 to 6',\n 'move 1 from 7 to 8',\n 'move 6 from 6 to 5',\n 'move 4 from 5 to 8',\n 'move 9 from 2 to 9',\n 'move 1 from 2 to 3',\n 'move 3 from 1 to 3',\n 'move 3 from 5 to 1',\n 'move 10 from 3 to 5',\n 'move 4 from 4 to 6',\n 'move 2 from 7 to 6',\n 'move 2 from 6 to 9',\n 'move 6 from 8 to 6',\n 'move 1 from 4 to 3',\n 'move 1 from 4 to 5',\n 'move 1 from 4 to 1',\n 'move 2 from 3 to 1',\n 'move 1 from 3 to 7',\n 'move 8 from 1 to 9',\n 'move 1 from 1 to 2',\n 'move 1 from 2 to 7',\n 'move 6 from 6 to 3',\n 'move 7 from 3 to 5',\n 'move 14 from 5 to 6',\n 'move 2 from 1 to 3',\n 'move 5 from 5 to 8',\n 'move 5 from 8 to 1',\n 'move 2 from 7 to 1',\n 'move 5 from 6 to 9',\n 'move 8 from 9 to 3',\n 'move 13 from 9 to 3',\n 'move 7 from 1 to 4',\n 'move 6 from 4 to 1',\n 'move 22 from 3 to 1',\n 'move 1 from 9 to 3',\n 'move 2 from 6 to 1',\n 'move 1 from 3 to 4',\n 'move 7 from 9 to 8',\n 'move 2 from 1 to 7',\n 'move 2 from 3 to 2',\n 'move 2 from 6 to 9',\n 'move 2 from 7 to 8',\n 'move 1 from 3 to 6',\n 'move 9 from 8 to 6',\n 'move 1 from 2 to 4',\n 'move 8 from 1 to 2',\n 'move 1 from 9 to 4',\n 'move 3 from 4 to 1',\n 'move 1 from 4 to 6',\n 'move 10 from 6 to 5',\n 'move 5 from 2 to 9',\n 'move 6 from 9 to 3',\n 'move 2 from 5 to 3',\n 'move 2 from 9 to 7',\n 'move 7 from 5 to 8',\n 'move 5 from 6 to 2',\n 'move 3 from 3 to 7',\n 'move 3 from 3 to 5',\n 'move 4 from 5 to 8',\n 'move 1 from 3 to 5',\n 'move 6 from 6 to 8',\n 'move 1 from 5 to 7',\n 'move 9 from 8 to 9',\n 'move 1 from 3 to 1',\n 'move 7 from 2 to 7',\n 'move 9 from 7 to 6',\n 'move 2 from 2 to 3',\n 'move 7 from 9 to 3',\n 'move 9 from 6 to 8',\n 'move 7 from 3 to 4',\n 'move 2 from 7 to 6',\n 'move 4 from 4 to 5',\n 'move 3 from 5 to 6',\n 'move 2 from 7 to 4',\n 'move 5 from 4 to 7',\n 'move 13 from 8 to 4',\n 'move 2 from 9 to 4',\n 'move 2 from 8 to 7',\n 'move 6 from 7 to 5',\n 'move 6 from 4 to 2',\n 'move 1 from 7 to 5',\n 'move 3 from 2 to 7',\n 'move 1 from 7 to 8']\n\n\n\nCreate a generator that returns the totals each time it iterates\n\n\nwith open(\"day5/sample.txt\") as f:\n    samples = f.read().splitlines() \n\n\npprint(samples)\n\n['    [D]    ',\n '[N] [C]    ',\n '[Z] [M] [P]',\n ' 1   2   3 ',\n '',\n 'move 1 from 2 to 1',\n 'move 3 from 1 to 3',\n 'move 2 from 2 to 1',\n 'move 1 from 1 to 2']\n\n\n\ncreate function that can compute the number of stacks\n\n\n\n\n\n\n\n get_stack_count (input:list[str])\n\nReturn the count of stacks given the input\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\nlist of strings\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(get_stack_count(samples))\n\n3\n\n\n\ncreate a function to initialize n stacks\n\n\n\n\n\n\n\n init_stacks (n:int)\n\nCreate a list of n stacks\n\n\n\n\nType\nDetails\n\n\n\n\nn\nint\nn of stacks\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\ninit_stacks(3)\n\n[[], [], []]\n\n\n\ncreate a function to split the samples into the stacks and the moves\n\n\n\n\n\n\n\n split_stack_moves (samples:list[str])\n\nSplit the input and separate the stack section from the moves\n\n\n\n\nType\nDetails\n\n\n\n\nsamples\nlist\nlist of strings\n\n\nReturns\nany\ntype: ignore\n\n\n\n\n\n\n\nstacks,moves = split_stack_moves(samples)\npprint(stacks)\npprint(moves)\n\n['    [D]    ', '[N] [C]    ', '[Z] [M] [P]']\n['move 1 from 2 to 1',\n 'move 3 from 1 to 3',\n 'move 2 from 2 to 1',\n 'move 1 from 1 to 2']\n\n\n\ncreate a function that parses the stacks printout into a real stack data structure\n\n\n\n\n\n\n\n build_stacks (stack_inputs:list[str], n_stacks:int)\n\nBuild the real stack structure from the printed version\n\n\n\n\nType\nDetails\n\n\n\n\nstack_inputs\nlist\nlist of strings representing a list of stacks\n\n\nn_stacks\nint\nnumber of stacks\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nn_stacks = get_stack_count(samples)\nstacks = build_stacks(stacks, n_stacks)\nprint(stacks, n_stacks)\n\n[['Z', 'N'], ['M', 'C', 'D'], ['P']] 3\n\n\n\nbuild a function that can parse a move statement\n\n\n\n\n\n\n\n parse_move (move:str)\n\nParse the move statement and return the ntokens,from,to values\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nmove\nstr\nstring with format move n from a to b\n\n\nReturns\n(<class â€˜intâ€™>, <class â€˜intâ€™>, <class â€˜intâ€™>)\ntype: ignore\n\n\n\n\n\n\n\nprint(parse_move(\"move 1 from 2 to 1\"))\n\n(1, 2, 1)\n\n\n\nbuild a function that can execute a move\n\n\n\n\n\n\n\n execute_move (stacks:list[list[str]], n_tokens:int, from_stack:int,\n               to_stack:int)\n\nExecutes a move of n_tokens from a stack to another stack\n\n\n\n\nType\nDetails\n\n\n\n\nstacks\nlist\nlist of stacks of tokens\n\n\nn_tokens\nint\ncount of tokens to move\n\n\nfrom_stack\nint\nfrom the stack (start from position 1)\n\n\nto_stack\nint\nto the stack (start from position 1)\n\n\n\n\n\n\n\nprint(\"before move:\")\npprint(stacks)\nprint(\"performing move 1 from 2 to 1\")\nexecute_move(stacks,1,2,1)\nprint(\"after move:\")\npprint(stacks)\n\nbefore move:\n[['Z', 'N'], ['M', 'C', 'D'], ['P']]\nperforming move 1 from 2 to 1\nafter move:\n[['Z', 'N', 'D'], ['M', 'C'], ['P']]\n\n\n\ncreate a function to process the moves\n\n\n\n\n\n\n\n process_moves (input:list[str])\n\nInitializes the stacks and processes the moves\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\ninputs with stacks and moves\n\n\n\n\n\n\n\nfinal_stacks = process_moves(samples)\npprint(final_stacks)\n\n[['C'], ['M'], ['P', 'D', 'N', 'Z']]\n\n\n\ncreate a function to grab the top element for each stack and concatenate them into a string\n\n\n\n\n\n\n\n get_top_elements (stacks:list[list[str]])\n\nGets the top tokens from each stack and concatenates to form a string\n\n\n\n\nType\nDetails\n\n\n\n\nstacks\nlist\na list of stacks of token\n\n\n\n\n\n\n\nprint(get_top_elements(final_stacks))\n\nCMZ\n\n\n\nFinally the answer for the top elements given the input\n\n\ninput_stacks = process_moves(input)\nanswer1 = get_top_elements(input_stacks)\nprint(f'the correct answer for part 1 is {answer1}')\n\nthe correct answer for part 1 is FCVRLMVQP"
  },
  {
    "objectID": "exercises/day5.html#part-2",
    "href": "exercises/day5.html#part-2",
    "title": "Day 5",
    "section": "Part 2",
    "text": "Part 2\n\ninput_stacks2 = process_moves2(input)\nanswer2 = get_top_elements(input_stacks2)\nprint(f'the correct answer for part 2 is {answer2}')\n\nthe correct answer for part 2 is RWLWGJGFD"
  },
  {
    "objectID": "exercises/day9.html",
    "href": "exercises/day9.html",
    "title": "Day 9",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day9/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['U 1',\n 'D 1',\n 'R 1',\n 'L 2',\n 'D 2',\n 'U 1',\n 'R 2',\n 'D 2',\n 'U 1',\n 'R 1',\n 'L 1',\n 'D 2',\n 'R 2',\n 'U 2',\n 'L 1',\n 'D 1',\n 'U 1',\n 'L 1',\n 'D 2',\n 'U 1',\n 'D 1',\n 'L 1',\n 'U 2',\n 'R 1',\n 'L 1',\n 'R 1',\n 'L 1',\n 'U 2',\n 'L 2',\n 'U 2',\n 'L 1',\n 'U 2',\n 'D 1',\n 'U 2',\n 'D 1',\n 'L 2',\n 'U 1',\n 'D 1',\n 'U 2',\n 'R 2',\n 'D 2',\n 'R 1',\n 'D 2',\n 'L 1',\n 'U 1',\n 'L 2',\n 'D 2',\n 'L 2',\n 'R 1',\n 'U 1',\n 'L 2',\n 'D 1',\n 'U 1',\n 'R 2',\n 'L 2',\n 'D 1',\n 'R 1',\n 'L 1',\n 'R 2',\n 'U 1',\n 'R 2',\n 'D 1',\n 'U 1',\n 'L 2',\n 'D 1',\n 'R 2',\n 'D 1',\n 'U 2',\n 'R 1',\n 'D 1',\n 'R 2',\n 'U 1',\n 'L 2',\n 'D 2',\n 'U 2',\n 'R 2',\n 'L 1',\n 'D 2',\n 'R 1',\n 'D 1',\n 'U 2',\n 'D 2',\n 'L 2',\n 'R 2',\n 'L 2',\n 'D 1',\n 'R 2',\n 'D 2',\n 'L 1',\n 'U 1',\n 'D 1',\n 'L 2',\n 'U 1',\n 'R 1',\n 'D 1',\n 'U 2',\n 'D 1',\n 'L 2',\n 'D 2',\n 'R 2']\n\n\n\nA function that processes the moves\nFinally the answer for the top 1 given the input\n\n\nrope, all_occupieds = process_moves(input, knots=2)\nprint(f'the correct answer for part 1 is {len(all_occupieds)}')\n\nthe correct answer for part 1 is 6332"
  },
  {
    "objectID": "exercises/day9.html#part-2",
    "href": "exercises/day9.html#part-2",
    "title": "Day 9",
    "section": "Part 2",
    "text": "Part 2\n\nrope2, all_occupieds2 = process_moves(input, knots=10)\nprint(f'the correct answer for part 2 is {len(all_occupieds2)}')\n\nthe correct answer for part 2 is 2511"
  },
  {
    "objectID": "exercises/day4.html",
    "href": "exercises/day4.html",
    "title": "Day 4",
    "section": "",
    "text": "Read in input file containing a list of section assignment pairs\n\n\nwith open(\"day4/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['28-88,85-88',\n '9-70,18-18',\n '76-90,53-89',\n '17-86,11-17',\n '8-8,8-82',\n '16-85,15-95',\n '20-76,19-20',\n '56-57,57-66',\n '95-99,1-96',\n '14-17,17-67',\n '95-99,32-98',\n '30-99,29-98',\n '12-95,11-94',\n '3-82,1-72',\n '4-88,88-88',\n '2-10,11-59',\n '8-16,8-16',\n '22-95,23-94',\n '46-51,78-99',\n '61-99,62-94',\n '30-72,26-73',\n '6-93,2-92',\n '16-93,17-96',\n '1-99,2-88',\n '23-89,88-93',\n '30-73,3-73',\n '9-75,75-76',\n '75-97,70-99',\n '4-23,22-23',\n '5-94,4-4',\n '16-48,15-22',\n '10-62,61-97',\n '34-82,81-87',\n '16-98,15-99',\n '16-22,17-22',\n '20-40,21-58',\n '67-86,22-87',\n '6-73,6-33',\n '27-73,40-55',\n '57-98,58-97',\n '94-95,14-80',\n '16-90,91-91',\n '2-89,5-89',\n '17-95,96-96',\n '46-48,19-47',\n '50-59,51-60',\n '45-98,44-97',\n '99-99,6-97',\n '3-29,1-29',\n '26-48,25-49',\n '10-17,19-57',\n '28-57,28-56',\n '79-96,80-97',\n '5-78,4-25',\n '35-84,35-84',\n '24-99,20-98',\n '80-80,53-79',\n '88-97,12-88',\n '9-20,9-72',\n '75-78,35-54',\n '11-29,28-91',\n '48-74,49-75',\n '56-56,56-98',\n '41-69,33-42',\n '6-40,6-40',\n '49-80,49-79',\n '12-29,18-70',\n '19-20,13-80',\n '96-96,15-95',\n '5-99,4-4',\n '47-47,41-46',\n '53-82,65-85',\n '88-90,89-90',\n '12-12,12-88',\n '52-68,51-67',\n '1-80,2-81',\n '75-81,70-76',\n '35-58,35-57',\n '19-91,18-19',\n '18-73,72-74',\n '9-13,8-10',\n '5-40,35-37',\n '43-71,70-71',\n '24-24,25-43',\n '60-92,35-60',\n '43-52,47-53',\n '8-97,97-99',\n '57-89,57-89',\n '69-70,31-69',\n '48-49,48-79',\n '5-13,14-97',\n '9-95,9-83',\n '80-80,79-83',\n '30-77,29-78',\n '67-75,67-76',\n '20-67,21-87',\n '22-99,74-99',\n '12-12,11-96',\n '26-61,25-67',\n '19-48,47-91']\n\n\n\nsamples = \"\"\"2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8\"\"\".splitlines()\n\n\nCreate a function to get the range given an assignment\n\n\n\n\n\n\n\n get_range (assgn:str)\n\nReturn a range object covering the range assignment\n\n\n\n\nType\nDetails\n\n\n\n\nassgn\nstr\na range of sections split by a dash(-)\n\n\nReturns\nrange\n\n\n\n\n\n\n\n\nprint(get_range(\"2-4\"))\nprint(get_range(\"6-8\"))\nprint(get_range(\"6-6\"))\n\nrange(2, 4)\nrange(6, 8)\nrange(6, 6)\n\n\n\nCreate a function to create a pair of ranges, one for each pair of elves\n\n\n\n\n\n\n\n get_assign_ranges (sample:str)\n\nReturn a list of range assignments, one each for a pair of elves\n\n\n\n\nType\nDetails\n\n\n\n\nsample\nstr\na set of assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_assign_ranges(samples[0]))\nprint(get_assign_ranges(samples[1]))\nprint(get_assign_ranges(samples[2]))\nprint(get_assign_ranges(samples[3]))\nprint(get_assign_ranges(samples[4]))\n\n[range(2, 4), range(6, 8)]\n[range(2, 3), range(4, 5)]\n[range(5, 7), range(7, 9)]\n[range(2, 8), range(3, 7)]\n[range(6, 6), range(4, 6)]\n\n\n\nCreate a function to check if one range contains the other\n\n\n\n\n\n\n\n contains (r1:range, r2:range)\n\nReturns whether the first range contains the other range\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nthe range it contains or not\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],contains(*get_assign_ranges(samples[0])))\nprint(samples[1],contains(*get_assign_ranges(samples[1])))\nprint(samples[2],contains(*get_assign_ranges(samples[2])))\nprint(samples[3],contains(*get_assign_ranges(samples[3])))\nprint(samples[4],contains(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 False\n2-8,3-7 True\n6-6,4-6 False\n\n\n\nCreate a function that checks if either range contains the other\n\n\n\n\n\n\n\n contains_each_other (r1:range, r2:range)\n\nReturns whether the either range contains the other\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nanother range\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],contains_each_other(*get_assign_ranges(samples[0])))\nprint(samples[1],contains_each_other(*get_assign_ranges(samples[1])))\nprint(samples[2],contains_each_other(*get_assign_ranges(samples[2])))\nprint(samples[3],contains_each_other(*get_assign_ranges(samples[3])))\nprint(samples[4],contains_each_other(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 False\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that returns all the overlapping samples given a list of samples\n\n\n\n\n\n\n\n get_overlapping (samples:list[str])\n\nReturn a list of overlapping pairs of ranges\n\n\n\n\nType\nDetails\n\n\n\n\nsamples\nlist\na list of section assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_overlapping(samples))\n\n[[range(2, 8), range(3, 7)], [range(6, 6), range(4, 6)]]\n\n\n\nFinally the answer for the count of overlapping assignments\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\noverlapping = get_overlapping(input)\nprint(f'the correct answer for part 1 is {len(overlapping)}')\n\nthe correct answer for part 1 is 513"
  },
  {
    "objectID": "exercises/day4.html#part-2",
    "href": "exercises/day4.html#part-2",
    "title": "Day 4",
    "section": "Part 2",
    "text": "Part 2\n\nCreate a function to check if one range partially contains the other\n\n\n\n\n\npartly_contains\n\n partly_contains (r1:range, r2:range)\n\nReturns whether the first range partially contains the other range\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nthe range it contains or not\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],partly_contains(*get_assign_ranges(samples[0])))\nprint(samples[1],partly_contains(*get_assign_ranges(samples[1])))\nprint(samples[2],partly_contains(*get_assign_ranges(samples[2])))\nprint(samples[3],partly_contains(*get_assign_ranges(samples[3])))\nprint(samples[4],partly_contains(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 True\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that checks if either range partially or fully contains the other\n\n\n\n\n\npartly_or_fully_contains_each_other\n\n partly_or_fully_contains_each_other (r1:range, r2:range)\n\nReturns whether the either range partly or fully contains the other\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nanother range\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],partly_or_fully_contains_each_other(*get_assign_ranges(samples[0])))\nprint(samples[1],partly_or_fully_contains_each_other(*get_assign_ranges(samples[1])))\nprint(samples[2],partly_or_fully_contains_each_other(*get_assign_ranges(samples[2])))\nprint(samples[3],partly_or_fully_contains_each_other(*get_assign_ranges(samples[3])))\nprint(samples[4],partly_or_fully_contains_each_other(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 True\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that returns all the partly or fully overlapping samples given a list of samples\n\n\n\n\n\nget_partly_overlapping\n\n get_partly_overlapping (samples:list[str])\n\nReturn a list of partially or fully overlapping pairs of ranges\n\n\n\n\nType\nDetails\n\n\n\n\nsamples\nlist\na list of section assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_partly_overlapping(samples))\n\n[[range(5, 7), range(7, 9)], [range(2, 8), range(3, 7)], [range(6, 6), range(4, 6)], [range(2, 6), range(4, 8)]]\n\n\n\nFinally the answer for the partially or fully overlapping given the input\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\noverlapping = get_partly_overlapping(input)\nprint(f'the correct answer for part 2 is {len(overlapping)}')\n\nthe correct answer for part 2 is 878"
  },
  {
    "objectID": "exercises/day10.html",
    "href": "exercises/day10.html",
    "title": "Day 10",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day10/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['addx 2',\n 'addx 3',\n 'addx 3',\n 'addx -2',\n 'addx 4',\n 'noop',\n 'addx 1',\n 'addx 4',\n 'addx 1',\n 'noop',\n 'addx 4',\n 'addx 1',\n 'noop',\n 'addx 2',\n 'addx 5',\n 'addx -28',\n 'addx 30',\n 'noop',\n 'addx 5',\n 'addx 1',\n 'noop',\n 'addx -38',\n 'noop',\n 'noop',\n 'noop',\n 'noop',\n 'addx 5',\n 'addx 5',\n 'addx 3',\n 'addx 2',\n 'addx -2',\n 'addx 2',\n 'noop',\n 'noop',\n 'addx -2',\n 'addx 12',\n 'noop',\n 'addx 2',\n 'addx 3',\n 'noop',\n 'addx 2',\n 'addx -31',\n 'addx 32',\n 'addx 7',\n 'noop',\n 'addx -2',\n 'addx -37',\n 'addx 1',\n 'addx 5',\n 'addx 1',\n 'noop',\n 'addx 31',\n 'addx -25',\n 'addx -10',\n 'addx 13',\n 'noop',\n 'noop',\n 'addx 18',\n 'addx -11',\n 'addx 3',\n 'noop',\n 'noop',\n 'addx 1',\n 'addx 4',\n 'addx -32',\n 'addx 15',\n 'addx 24',\n 'addx -2',\n 'noop',\n 'addx -37',\n 'noop',\n 'noop',\n 'noop',\n 'addx 5',\n 'addx 5',\n 'addx 21',\n 'addx -20',\n 'noop',\n 'addx 6',\n 'addx 19',\n 'addx -5',\n 'addx -8',\n 'addx -22',\n 'addx 26',\n 'addx -22',\n 'addx 23',\n 'addx 2',\n 'noop',\n 'noop',\n 'noop',\n 'addx 8',\n 'addx -10',\n 'addx -27',\n 'addx 33',\n 'addx -27',\n 'noop',\n 'addx 34',\n 'addx -33',\n 'addx 2',\n 'addx 19']\n\n\n\nCreate a generator that returns the totals each time it iterates\nFinally the answer for the top 1 given the input\n\n\nstrengths = sum_strengths(input)\nprint(f'the correct answer for part 1 is {strengths}')\n\nthe correct answer for part 1 is 14540"
  },
  {
    "objectID": "exercises/day10.html#part-2",
    "href": "exercises/day10.html#part-2",
    "title": "Day 10",
    "section": "Part 2",
    "text": "Part 2\n\ncpu = CPU(input)\npixels = list(cpu.draw_pixel())\nfor i in range(0,240,40):\n    row = pixels[i:i+40]\n    s = \"\".join(row)\n    print(s)\n\nprint(\"EHZFZHCZ\")\n\n####.#..#.####.####.####.#..#..##..####.\n#....#..#....#.#.......#.#..#.#..#....#.\n###..####...#..###....#..####.#......#..\n#....#..#..#...#.....#...#..#.#.....#...\n#....#..#.#....#....#....#..#.#..#.#....\n####.#..#.####.#....####.#..#..##..####.\nEHZFZHCZ"
  },
  {
    "objectID": "exercises/day6.html",
    "href": "exercises/day6.html",
    "title": "Day 6",
    "section": "",
    "text": "Read in input file\n\n\nwith open(\"day6/input.txt\") as f:\n    input = f.read()\n\nFirst 100 lines of input looks like this:\n\n\nbgdbdsbsbsttldddzzwnzzmpzmmzmqqcgglrglgbbbtmtddrssjtjqqtrtqtqppcvcddswdwbwlblfljfljlhhpchcfcgfcfwfll\n\n\n\nsample = \"mjqjpqmgbljsphdztnvjfqwrcgsmlb\"\n\n\nCreate a function that detects the start of the packet\n\n\ndef marker_count(input):\n    window = []\n    for i,o in enumerate(input):\n        window.insert(0,o)\n        if len(window) > 4:\n            window.pop()\n        if len(set(window)) == 4: \n            return i + 1\n    return None\n\nprint(marker_count(sample))\n\n7\n\n\n\nprint(f'the correct answer for part 1 is {marker_count(input)}')\n\nthe correct answer for part 1 is 1794"
  },
  {
    "objectID": "exercises/day6.html#part-2",
    "href": "exercises/day6.html#part-2",
    "title": "Day 6",
    "section": "Part 2",
    "text": "Part 2\n\nsample2 = \"mjqjpqmgbljsphdztnvjfqwrcgsmlb\"\n\n\nModify the marker to count 14 instead of 4\n\n\ndef marker_count2(input):\n    window = []\n    for i,o in enumerate(input):\n        window.insert(0,o)\n        if len(window) > 14:\n            window.pop()\n        if len(set(window)) == 14: \n            return i + 1\n    return None\n\nprint(marker_count2(sample2))\n\n19\n\n\n\nprint(f'the correct answer for part 2 is {marker_count2(input)}')\n\nthe correct answer for part 2 is 2851\n\n\n\nprint(f'the correct answer for part 1 is')\n\nthe correct answer for part 1 is"
  },
  {
    "objectID": "exercises/day3.html",
    "href": "exercises/day3.html",
    "title": "Day 3",
    "section": "",
    "text": "Read in input file containing list of the contents of rucksacks\nEach line contains items in 2 compartments equally divided\nThere is one component common to 2 compartments\nThis common component determines the priority (a-z 1-26, A-Z 27-52)\nGet the sum of all components\n\n\nwith open(\"day3/input.txt\") as f:\n    input = [o.strip() for o in f.read().split(\"\\n\")]\n\npprint(input[:5])\n\n['shzsFcPssFhjFssBzdpRcNHNZrpdJdJVJZ',\n 'fwvMCntfCCbSbSbtDgDNrDtDtJHZVH',\n 'GbCwwbwwnGrLhBzjFFFsWPhL',\n 'PpCqRsqqmmtCwMJC',\n 'LHFrLLHDSNHlfWNhDzmjzzJlJzPJMvPJjQ']\n\n\n\nCreate a function that finds the common item in the two compartments for each rucksack\n\n\n\n\n\n\n\n common_item (sample:str)\n\nFind the common item in the 2 compartments\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsample\nstr\na sample rucksack containing items from 2 compartments\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nsamples = \"\"\"vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\"\"\".split(\"\\n\")\n\n\nprint(common_item(samples[0]))\nprint(common_item(samples[1]))\nprint(common_item(samples[2]))\nprint(common_item(samples[3]))\nprint(common_item(samples[4]))\nprint(common_item(samples[5]))\n\np\nL\nP\nv\nt\ns\n\n\n\nCreate a function that computes the priority for an item\n\n\n\n\n\n\n\n priority (item:str)\n\nReturn the priority of an item\n\n\n\n\nType\nDetails\n\n\n\n\nitem\nstr\nreturn the priority of an item (single char)\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(priority('a'))\nprint(priority('p'))\nprint(priority('A'))\nprint(priority('Z'))\n\n1\n16\n27\n52\n\n\n\nCreate a function that sums all the priorities of the common element for all the rucksacks\n\n\n\n\n\n\n\n sum_priorities (inputs:list[str])\n\nReturn the sum of priorities of the common item for all the rucksacks\n\n\n\n\nType\nDetails\n\n\n\n\ninputs\nlist\na list of rucksacks, each containing 2 compartments\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(sum_priorities(samples))\n\n157\n\n\n\nFinally the total score\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_priorities = sum_priorities(input)\nprint(f'the correct answer for part 1 is {total_priorities}')\n\nthe correct answer for part 1 is 8185"
  },
  {
    "objectID": "exercises/day3.html#part-2",
    "href": "exercises/day3.html#part-2",
    "title": "Day 3",
    "section": "Part 2",
    "text": "Part 2\n\nGroup the rucksacks into 3 each\nCreate a generator that returns the inputs as groups of 3:\n\n\n\n\n\ngenerate_group\n\n generate_group (inputs:list[str], sz:int=3)\n\nGenerate a subsetted list of rucksacks of size sz\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninputs\nlist\n\na list of rucksacks\n\n\nsz\nint\n3\ngroup size\n\n\nReturns\ntyping.Generator[list[str], NoneType, NoneType]\n\n\n\n\n\n\n\n\n\ngroups = list(generate_group(samples))\nprint(groups[0])\nprint(groups[1])\n\n['vJrwpWtwJgWrhcsFMMfFFhFp', 'jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL', 'PmmdzqPrVvPwwTWBwg']\n['wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn', 'ttgJtRGJQctTZtZT', 'CrZsJsPPZsGzwwsLwLmpwMDw']\n\n\n\nCreate a function that finds the badge (i.e.Â the common element) for a group of rucksacks\n\n\n\n\n\nfind_group_badge\n\n find_group_badge (group:list[str])\n\nReturn the common item for the group of rucksacks\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nlist\ngroup of rucksacks\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nprint(find_group_badge(groups[0]))\nprint(find_group_badge(groups[1]))\n\nr\nZ\n\n\n\nCreate a function that sums the priorities of the badges of each group in the list of rucksacks\n\n\n\n\n\nsum_badge_priorities\n\n sum_badge_priorities (inputs:list[str], sz:int=3)\n\nReturn the sum of the priorities of the group badges for all inputs\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninputs\nlist\n\nlist of rucksacks\n\n\nsz\nint\n3\ngroup size\n\n\nReturns\nint\n\n\n\n\n\n\n\n\n\nprint(sum_badge_priorities(samples))\n\n70\n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_badge_priorities = sum_badge_priorities(input)\nprint(f'the correct answer for part 2 is {total_badge_priorities}')\n\nthe correct answer for part 2 is 2817"
  },
  {
    "objectID": "exercises/day2.html",
    "href": "exercises/day2.html",
    "title": "Day 2",
    "section": "",
    "text": "Read in input file contain list of moves\neach line contains 2 pairs:\n\nthe first column is the opponents move: Rock (A) Paper(B) Scissors(C)\nthe second column is your move Rock (X) Paper(Y) Scissors (Z)\n\n\n\nwith open(\"day2/input.txt\") as f:\n    input = f.read().splitlines()\n\npprint(input[:5])\n\n['B Y', 'A Z', 'C Z', 'A Y', 'A Y']\n\n\n\n\n\n\n\n\n match_value (your_piece:str, opp_piece:str)\n\nReturns the value of the match between your piece and the opponentâ€™s piece - if equal, returns 3, else if you win then return 6 else return 0\n\n\n\n\nType\nDetails\n\n\n\n\nyour_piece\nstr\nyour piece (Rock/Paper/Scissors)\n\n\nopp_piece\nstr\nopponentâ€™s piece (Rock/Paper/Scissors)\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(match_value(\"Rock\",\"Paper\"))\nprint(match_value(\"Rock\",\"Scissors\"))\nprint(match_value(\"Paper\",\"Paper\"))\nprint(match_value(\"Paper\",\"Scissors\"))\n\n0\n6\n3\n0\n\n\n\nCreate a function that computes the score for each line\n\n\n\n\n\n\n\n score (input:str)\n\nReturns the score of each move by you and your opponent based on the combination of the match value plus the piece value.\nYour opponentâ€™s and your move (Rock,Paper,Scissors) which are encoded A,B,C and by X,Y,Z respectively.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nstr\na string containing your opponentâ€™s and your move separated by a space\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nFor each sequence of numbers punctuated by an empty line, sum up calories for each\nIf sum of calories is greater than current max, set that as the current max\n\n\nprint(score(\"A Y\"))\nprint(score(\"B X\"))\nprint(score(\"C Z\"))\n\n8\n1\n6\n\n\n\nFinally the total score\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_score = sum([score(l) for l in input])\nprint(f'the correct answer for part 1 is {total_score}')\n\nthe correct answer for part 1 is 10404"
  },
  {
    "objectID": "exercises/day2.html#part-2",
    "href": "exercises/day2.html#part-2",
    "title": "Day 2",
    "section": "Part 2",
    "text": "Part 2\n\nReinterpret your move to follow a strategy:\n\nX means LOSE, Y means DRAW, Z means WIN\n\nCreate a function that finds the piece to fulfill a strategy (WIN,LOSE or DRAW) based on the opponent piece\n\n\n\n\n\nfind_strat_piece\n\n find_strat_piece (opp_piece:str, your_strat:str)\n\nFinds the piece that matches the strategy you picked given the opponentâ€™s piece\n\n\n\n\nType\nDetails\n\n\n\n\nopp_piece\nstr\nyour opponents piece (Rock, Paper,Scissors)\n\n\nyour_strat\nstr\nyour strategy (WIN,LOSE, DRAW)\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nprint(find_strat_piece(\"Rock\",\"DRAW\"))\nprint(find_strat_piece(\"Scissors\",\"WIN\"))\nprint(find_strat_piece(\"Paper\",\"LOSE\"))\n\nRock\nRock\nRock\n\n\n\nCreate a function that computes the score for each line based on the second item being the strategy\n\n\n\n\n\nscore_strat_action\n\n score_strat_action (input:str)\n\nReturns the score given the opponents move and your strategy\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nstr\na string containing your opponentâ€™s move and your strategy separated by a space\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(score_strat_action(\"A Y\"))\nprint(score_strat_action(\"B X\"))\nprint(score_strat_action(\"C Z\"))\n\n4\n1\n7\n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_strat_score = sum([score_strat_action(l) for l in input])\nprint(f'the correct answer for part 2 is {total_strat_score}')\n\nthe correct answer for part 2 is 10334"
  },
  {
    "objectID": "notebooks/test_day11.html",
    "href": "notebooks/test_day11.html",
    "title": "Advent of Code 2022",
    "section": "",
    "text": "from butchland_aoc2022.day11 import *\n\n\nsm_input = \"\"\"Monkey 0:\n  Starting items: 79, 98\n  Operation: new = old * 19\n  Test: divisible by 23\n    If true: throw to monkey 2\n    If false: throw to monkey 3\n\nMonkey 1:\n  Starting items: 54, 65, 75, 74\n  Operation: new = old + 6\n  Test: divisible by 19\n    If true: throw to monkey 2\n    If false: throw to monkey 0\n\nMonkey 2:\n  Starting items: 79, 60, 97\n  Operation: new = old * old\n  Test: divisible by 13\n    If true: throw to monkey 1\n    If false: throw to monkey 3\n\nMonkey 3:\n  Starting items: 74\n  Operation: new = old + 3\n  Test: divisible by 17\n    If true: throw to monkey 0\n    If false: throw to monkey 1\"\"\"\n\n\ndef sm_samples():\n    return sm_input.splitlines()\n\n\nlcm = extract_lcm(sm_samples()); lcm\n\n96577\n\n\n\nmonkeys = list(generate_monkeys(sm_samples()))\n\n\nmonkeys2 = list(generate_monkeys(sm_samples(),divisor=3))\n\n\nmonkeys2[0].operation(3)\n\n19\n\n\n\nmonkeys2[1].operation(1)\n\n2\n\n\n\n7 // 3\n\n2\n\n\n\nmonkeys[1].operation(1)\n\n7\n\n\n\nmonkeys2[1].operation(15)\n\n7"
  },
  {
    "objectID": "notebooks/test1.html",
    "href": "notebooks/test1.html",
    "title": "Advent of Code 2022",
    "section": "",
    "text": "3 * 4\n\n12\n\n\n\n2 * 4\n\n8\n\n\n\n3 * 2\n\n6\n\n\n\nns = list(range(12*8))\n\n\nmax(ns)\n\n95\n\n\n\nns2 = [i % 24 for i in ns]\n\n\nmax(ns2)\n\n23\n\n\n\nassert [i % 12 for i in ns] == [i % 12 for i in ns2]\n\n\nassert [i % 8 for i in ns] == [i % 8 for i in ns2]\n\n\n8*12\n\n96\n\n\n\n[i % 6 for i in ns]\n\n[0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0]\n\n\n\nimport math\n\n\nmath.lcm(12,8)\n\n24\n\n\n\nmath.lcm(23,19,13,17)\n\n96577\n\n\n\n[i % 1 for"
  }
]