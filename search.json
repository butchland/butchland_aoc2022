[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this site",
    "section": "",
    "text": "My answers to the Advent of Code 2022 Edition"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code 2022",
    "section": "",
    "text": "This is my ongoing journal as I try to complete the 2022 Edition of the Advent of Code\nMy goal is not to get the highest amount of stars, but Iâ€™ll be happy to complete the 50 stars which would mean I solved all the problems.\nMy primary objective (aside from solving the problem) is to try to solve the problems as professionally as possible. e.g."
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Advent of Code 2022",
    "section": "Links",
    "text": "Links\n\nGithub Repo - contains the code solution to get the answers\nMy Advent of Code 2022 Solutions - the answers are hidden by default but you can view it by clicking on the answer tab for each part\nAdvent of Code"
  },
  {
    "objectID": "index.html#tech-stack",
    "href": "index.html#tech-stack",
    "title": "Advent of Code 2022",
    "section": "Tech stack",
    "text": "Tech stack\n\npython\npytest\nquarto\nnbdev"
  },
  {
    "objectID": "exercises/day1.html",
    "href": "exercises/day1.html",
    "title": "Day1",
    "section": "",
    "text": "Read in input file contain list of calories\n\n\nwith open(\"day1/input1.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['13399',\n '13677',\n '11945',\n '9861',\n '6484',\n '4257',\n '',\n '6616',\n '7349',\n '7758',\n '1591',\n '6068',\n '9217',\n '6924',\n '6766',\n '',\n '10040',\n '9088',\n '11305',\n '5867',\n '10766',\n '9996',\n '11092',\n '',\n '1320',\n '4921',\n '2338',\n '1351',\n '3462',\n '5916',\n '3124',\n '1416',\n '3655',\n '4886',\n '1135',\n '5171',\n '5020',\n '5099',\n '4785',\n '',\n '1702',\n '5083',\n '3852',\n '3361',\n '2505',\n '3767',\n '1069',\n '3564',\n '3189',\n '5950',\n '2250',\n '2053',\n '1639',\n '1430',\n '4586',\n '',\n '4135',\n '7033',\n '4649',\n '3126',\n '1136',\n '1435',\n '3825',\n '2205',\n '1259',\n '5473',\n '1803',\n '6406',\n '',\n '2466',\n '30094',\n '',\n '3122',\n '2983',\n '5988',\n '4214',\n '5278',\n '1974',\n '7109',\n '2419',\n '3777',\n '8299',\n '',\n '10191',\n '6122',\n '7298',\n '7855',\n '8666',\n '4777',\n '6833',\n '8862',\n '',\n '6100',\n '5332',\n '1908',\n '2796',\n '1818',\n '4657',\n '1650',\n '5560']\n\n\n\nCreate a generator that returns the totals each time it iterates\n\n\n\n\n\n\n\n generate_totals (input:list[str])\n\nGenerate totals from an input string consisting of lines where each line is an integer and delimited by an empty line\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\nlist of strings each containing an int or empty line\n\n\nReturns\ntyping.Generator[int, NoneType, NoneType]\n\n\n\n\n\n\n\n\nsample = ['1','1','','2','3']\npprint(list(generate_totals(sample)))\n\n[2, 5]\n\n\n\nCreate a function that sums the top n\n\n\n\n\n\n\n\n sum_top_n (input:list[str], n:int)\n\nSum top n of totals for the highest n totals\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nlist\nlist of strings each containing an int or empty line\n\n\nn\nint\ntop n count\n\n\n\n\n\n\n\nFor each sequence of numbers punctuated by an empty line, sum up calories for each\nIf sum of calories is greater than current max, set that as the current max\n\n\nsample = ['1','1','','3','','1','','2','','4','','5']\nmax_calories = sum_top_n(sample,1)\nprint(max_calories)\n\n5\n\n\n\nmax_calories = sum_top_n(sample,3)\nprint(max_calories)\n\n12\n\n\n\nFinally the answer for the top 1 given the input\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\nmax_calories = sum_top_n(input, 1)\nprint(f'the correct answer for part 1 is {max_calories}')\n\nthe correct answer for part 1 is 75622"
  },
  {
    "objectID": "exercises/day1.html#part-2",
    "href": "exercises/day1.html#part-2",
    "title": "Day1",
    "section": "Part 2",
    "text": "Part 2\n\nPart 2 is now easy, since we can handle top n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\nmax_calories = sum_top_n(input, 3)\nprint(f'the correct answer for part 2 is {max_calories}')\n\nthe correct answer for part 2 is 213159"
  },
  {
    "objectID": "exercises/day4.html",
    "href": "exercises/day4.html",
    "title": "Day 4",
    "section": "",
    "text": "Read in input file containing a list of section assignment pairs\n\n\nwith open(\"day4/input.txt\") as f:\n    input = f.read().splitlines()\n\nFirst 100 lines of input looks like this:\n\n\n['28-88,85-88',\n '9-70,18-18',\n '76-90,53-89',\n '17-86,11-17',\n '8-8,8-82',\n '16-85,15-95',\n '20-76,19-20',\n '56-57,57-66',\n '95-99,1-96',\n '14-17,17-67',\n '95-99,32-98',\n '30-99,29-98',\n '12-95,11-94',\n '3-82,1-72',\n '4-88,88-88',\n '2-10,11-59',\n '8-16,8-16',\n '22-95,23-94',\n '46-51,78-99',\n '61-99,62-94',\n '30-72,26-73',\n '6-93,2-92',\n '16-93,17-96',\n '1-99,2-88',\n '23-89,88-93',\n '30-73,3-73',\n '9-75,75-76',\n '75-97,70-99',\n '4-23,22-23',\n '5-94,4-4',\n '16-48,15-22',\n '10-62,61-97',\n '34-82,81-87',\n '16-98,15-99',\n '16-22,17-22',\n '20-40,21-58',\n '67-86,22-87',\n '6-73,6-33',\n '27-73,40-55',\n '57-98,58-97',\n '94-95,14-80',\n '16-90,91-91',\n '2-89,5-89',\n '17-95,96-96',\n '46-48,19-47',\n '50-59,51-60',\n '45-98,44-97',\n '99-99,6-97',\n '3-29,1-29',\n '26-48,25-49',\n '10-17,19-57',\n '28-57,28-56',\n '79-96,80-97',\n '5-78,4-25',\n '35-84,35-84',\n '24-99,20-98',\n '80-80,53-79',\n '88-97,12-88',\n '9-20,9-72',\n '75-78,35-54',\n '11-29,28-91',\n '48-74,49-75',\n '56-56,56-98',\n '41-69,33-42',\n '6-40,6-40',\n '49-80,49-79',\n '12-29,18-70',\n '19-20,13-80',\n '96-96,15-95',\n '5-99,4-4',\n '47-47,41-46',\n '53-82,65-85',\n '88-90,89-90',\n '12-12,12-88',\n '52-68,51-67',\n '1-80,2-81',\n '75-81,70-76',\n '35-58,35-57',\n '19-91,18-19',\n '18-73,72-74',\n '9-13,8-10',\n '5-40,35-37',\n '43-71,70-71',\n '24-24,25-43',\n '60-92,35-60',\n '43-52,47-53',\n '8-97,97-99',\n '57-89,57-89',\n '69-70,31-69',\n '48-49,48-79',\n '5-13,14-97',\n '9-95,9-83',\n '80-80,79-83',\n '30-77,29-78',\n '67-75,67-76',\n '20-67,21-87',\n '22-99,74-99',\n '12-12,11-96',\n '26-61,25-67',\n '19-48,47-91']\n\n\n\nsamples = \"\"\"2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8\"\"\".splitlines()\n\n\nCreate a function to get the range given an assignment\n\n\n\n\n\n\n\n get_range (assgn:str)\n\nReturn a range object covering the range assignment\n\n\n\n\nType\nDetails\n\n\n\n\nassgn\nstr\na range of sections split by a dash(-)\n\n\nReturns\nrange\n\n\n\n\n\n\n\n\nprint(get_range(\"2-4\"))\nprint(get_range(\"6-8\"))\nprint(get_range(\"6-6\"))\n\nrange(2, 4)\nrange(6, 8)\nrange(6, 6)\n\n\n\nCreate a function to create a pair of ranges, one for each pair of elves\n\n\n\n\n\n\n\n get_assign_ranges (sample:str)\n\nReturn a list of range assignments, one each for a pair of elves\n\n\n\n\nType\nDetails\n\n\n\n\nsample\nstr\na set of assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_assign_ranges(samples[0]))\nprint(get_assign_ranges(samples[1]))\nprint(get_assign_ranges(samples[2]))\nprint(get_assign_ranges(samples[3]))\nprint(get_assign_ranges(samples[4]))\n\n[range(2, 4), range(6, 8)]\n[range(2, 3), range(4, 5)]\n[range(5, 7), range(7, 9)]\n[range(2, 8), range(3, 7)]\n[range(6, 6), range(4, 6)]\n\n\n\nCreate a function to check if one range contains the other\n\n\n\n\n\n\n\n contains (r1:range, r2:range)\n\nReturns whether the first range contains the other range\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nthe range it contains or not\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],contains(*get_assign_ranges(samples[0])))\nprint(samples[1],contains(*get_assign_ranges(samples[1])))\nprint(samples[2],contains(*get_assign_ranges(samples[2])))\nprint(samples[3],contains(*get_assign_ranges(samples[3])))\nprint(samples[4],contains(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 False\n2-8,3-7 True\n6-6,4-6 False\n\n\n\nCreate a function that checks if either range contains the other\n\n\n\n\n\n\n\n contains_each_other (r1:range, r2:range)\n\nReturns whether the either range contains the other\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nanother range\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],contains_each_other(*get_assign_ranges(samples[0])))\nprint(samples[1],contains_each_other(*get_assign_ranges(samples[1])))\nprint(samples[2],contains_each_other(*get_assign_ranges(samples[2])))\nprint(samples[3],contains_each_other(*get_assign_ranges(samples[3])))\nprint(samples[4],contains_each_other(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 False\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that returns all the overlapping samples given a list of samples\n\n\n\n\n\n\n\n get_overlapping (samples:list[str])\n\nReturn a list of overlapping pairs of ranges\n\n\n\n\nType\nDetails\n\n\n\n\nsamples\nlist\na list of section assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_overlapping(samples))\n\n[[range(2, 8), range(3, 7)], [range(6, 6), range(4, 6)]]\n\n\n\nFinally the answer for the count of overlapping assignments\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\noverlapping = get_overlapping(input)\nprint(f'the correct answer for part 1 is {len(overlapping)}')\n\nthe correct answer for part 1 is 513"
  },
  {
    "objectID": "exercises/day4.html#part-2",
    "href": "exercises/day4.html#part-2",
    "title": "Day 4",
    "section": "Part 2",
    "text": "Part 2\n\nCreate a function to check if one range partially contains the other\n\n\n\n\n\npartly_contains\n\n partly_contains (r1:range, r2:range)\n\nReturns whether the first range partially contains the other range\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nthe range it contains or not\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],partly_contains(*get_assign_ranges(samples[0])))\nprint(samples[1],partly_contains(*get_assign_ranges(samples[1])))\nprint(samples[2],partly_contains(*get_assign_ranges(samples[2])))\nprint(samples[3],partly_contains(*get_assign_ranges(samples[3])))\nprint(samples[4],partly_contains(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 True\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that checks if either range partially or fully contains the other\n\n\n\n\n\npartly_or_fully_contains_each_other\n\n partly_or_fully_contains_each_other (r1:range, r2:range)\n\nReturns whether the either range partly or fully contains the other\n\n\n\n\nType\nDetails\n\n\n\n\nr1\nrange\na range to check\n\n\nr2\nrange\nanother range\n\n\nReturns\nbool\n\n\n\n\n\n\n\n\nprint(samples[0],partly_or_fully_contains_each_other(*get_assign_ranges(samples[0])))\nprint(samples[1],partly_or_fully_contains_each_other(*get_assign_ranges(samples[1])))\nprint(samples[2],partly_or_fully_contains_each_other(*get_assign_ranges(samples[2])))\nprint(samples[3],partly_or_fully_contains_each_other(*get_assign_ranges(samples[3])))\nprint(samples[4],partly_or_fully_contains_each_other(*get_assign_ranges(samples[4])))\n\n2-4,6-8 False\n2-3,4-5 False\n5-7,7-9 True\n2-8,3-7 True\n6-6,4-6 True\n\n\n\nCreate a function that returns all the partly or fully overlapping samples given a list of samples\n\n\n\n\n\nget_partly_overlapping\n\n get_partly_overlapping (samples:list[str])\n\nReturn a list of partially or fully overlapping pairs of ranges\n\n\n\n\nType\nDetails\n\n\n\n\nsamples\nlist\na list of section assignments for a pair of elves\n\n\nReturns\nlist\n\n\n\n\n\n\n\n\nprint(get_partly_overlapping(samples))\n\n[[range(5, 7), range(7, 9)], [range(2, 8), range(3, 7)], [range(6, 6), range(4, 6)], [range(2, 6), range(4, 8)]]\n\n\n\nFinally the answer for the partially or fully overlapping given the input\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\noverlapping = get_partly_overlapping(input)\nprint(f'the correct answer for part 2 is {len(overlapping)}')\n\nthe correct answer for part 2 is 878"
  },
  {
    "objectID": "exercises/day3.html",
    "href": "exercises/day3.html",
    "title": "Day 3",
    "section": "",
    "text": "Read in input file containing list of the contents of rucksacks\nEach line contains items in 2 compartments equally divided\nThere is one component common to 2 compartments\nThis common component determines the priority (a-z 1-26, A-Z 27-52)\nGet the sum of all components\n\n\nwith open(\"day3/input.txt\") as f:\n    input = [o.strip() for o in f.read().split(\"\\n\")]\n\npprint(input[:5])\n\n['shzsFcPssFhjFssBzdpRcNHNZrpdJdJVJZ',\n 'fwvMCntfCCbSbSbtDgDNrDtDtJHZVH',\n 'GbCwwbwwnGrLhBzjFFFsWPhL',\n 'PpCqRsqqmmtCwMJC',\n 'LHFrLLHDSNHlfWNhDzmjzzJlJzPJMvPJjQ']\n\n\n\nCreate a function that finds the common item in the two compartments for each rucksack\n\n\n\n\n\n\n\n common_item (sample:str)\n\nFind the common item in the 2 compartments\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsample\nstr\na sample rucksack containing items from 2 compartments\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nsamples = \"\"\"vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw\"\"\".split(\"\\n\")\n\n\nprint(common_item(samples[0]))\nprint(common_item(samples[1]))\nprint(common_item(samples[2]))\nprint(common_item(samples[3]))\nprint(common_item(samples[4]))\nprint(common_item(samples[5]))\n\np\nL\nP\nv\nt\ns\n\n\n\nCreate a function that computes the priority for an item\n\n\n\n\n\n\n\n priority (item:str)\n\nReturn the priority of an item\n\n\n\n\nType\nDetails\n\n\n\n\nitem\nstr\nreturn the priority of an item (single char)\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(priority('a'))\nprint(priority('p'))\nprint(priority('A'))\nprint(priority('Z'))\n\n1\n16\n27\n52\n\n\n\nCreate a function that sums all the priorities of the common element for all the rucksacks\n\n\n\n\n\n\n\n sum_priorities (inputs:list[str])\n\nReturn the sum of priorities of the common item for all the rucksacks\n\n\n\n\nType\nDetails\n\n\n\n\ninputs\nlist\na list of rucksacks, each containing 2 compartments\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(sum_priorities(samples))\n\n157\n\n\n\nFinally the total score\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_priorities = sum_priorities(input)\nprint(f'the correct answer for part 1 is {total_priorities}')\n\nthe correct answer for part 1 is 8185"
  },
  {
    "objectID": "exercises/day3.html#part-2",
    "href": "exercises/day3.html#part-2",
    "title": "Day 3",
    "section": "Part 2",
    "text": "Part 2\n\nGroup the rucksacks into 3 each\nCreate a generator that returns the inputs as groups of 3:\n\n\n\n\n\ngenerate_group\n\n generate_group (inputs:list[str], sz:int=3)\n\nGenerate a subsetted list of rucksacks of size sz\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninputs\nlist\n\na list of rucksacks\n\n\nsz\nint\n3\ngroup size\n\n\nReturns\ntyping.Generator[list[str], NoneType, NoneType]\n\n\n\n\n\n\n\n\n\ngroups = list(generate_group(samples))\nprint(groups[0])\nprint(groups[1])\n\n['vJrwpWtwJgWrhcsFMMfFFhFp', 'jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL', 'PmmdzqPrVvPwwTWBwg']\n['wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn', 'ttgJtRGJQctTZtZT', 'CrZsJsPPZsGzwwsLwLmpwMDw']\n\n\n\nCreate a function that finds the badge (i.e.Â the common element) for a group of rucksacks\n\n\n\n\n\nfind_group_badge\n\n find_group_badge (group:list[str])\n\nReturn the common item for the group of rucksacks\n\n\n\n\nType\nDetails\n\n\n\n\ngroup\nlist\ngroup of rucksacks\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nprint(find_group_badge(groups[0]))\nprint(find_group_badge(groups[1]))\n\nr\nZ\n\n\n\nCreate a function that sums the priorities of the badges of each group in the list of rucksacks\n\n\n\n\n\nsum_badge_priorities\n\n sum_badge_priorities (inputs:list[str], sz:int=3)\n\nReturn the sum of the priorities of the group badges for all inputs\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninputs\nlist\n\nlist of rucksacks\n\n\nsz\nint\n3\ngroup size\n\n\nReturns\nint\n\n\n\n\n\n\n\n\n\nprint(sum_badge_priorities(samples))\n\n70\n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_badge_priorities = sum_badge_priorities(input)\nprint(f'the correct answer for part 2 is {total_badge_priorities}')\n\nthe correct answer for part 2 is 2817"
  },
  {
    "objectID": "exercises/day2.html",
    "href": "exercises/day2.html",
    "title": "Day 2",
    "section": "",
    "text": "Read in input file contain list of moves\neach line contains 2 pairs:\n\nthe first column is the opponents move: Rock (A) Paper(B) Scissors(C)\nthe second column is your move Rock (X) Paper(Y) Scissors (Z)\n\n\n\nwith open(\"day2/input.txt\") as f:\n    input = f.read().splitlines()\n\npprint(input[:5])\n\n['B Y', 'A Z', 'C Z', 'A Y', 'A Y']\n\n\n\n\n\n\n\n\n match_value (your_piece:str, opp_piece:str)\n\nReturns the value of the match between your piece and the opponentâ€™s piece - if equal, returns 3, else if you win then return 6 else return 0\n\n\n\n\nType\nDetails\n\n\n\n\nyour_piece\nstr\nyour piece (Rock/Paper/Scissors)\n\n\nopp_piece\nstr\nopponentâ€™s piece (Rock/Paper/Scissors)\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(match_value(\"Rock\",\"Paper\"))\nprint(match_value(\"Rock\",\"Scissors\"))\nprint(match_value(\"Paper\",\"Paper\"))\nprint(match_value(\"Paper\",\"Scissors\"))\n\n0\n6\n3\n0\n\n\n\nCreate a function that computes the score for each line\n\n\n\n\n\n\n\n score (input:str)\n\nReturns the score of each move by you and your opponent based on the combination of the match value plus the piece value.\nYour opponentâ€™s and your move (Rock,Paper,Scissors) which are encoded A,B,C and by X,Y,Z respectively.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nstr\na string containing your opponentâ€™s and your move separated by a space\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nFor each sequence of numbers punctuated by an empty line, sum up calories for each\nIf sum of calories is greater than current max, set that as the current max\n\n\nprint(score(\"A Y\"))\nprint(score(\"B X\"))\nprint(score(\"C Z\"))\n\n8\n1\n6\n\n\n\nFinally the total score\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_score = sum([score(l) for l in input])\nprint(f'the correct answer for part 1 is {total_score}')\n\nthe correct answer for part 1 is 10404"
  },
  {
    "objectID": "exercises/day2.html#part-2",
    "href": "exercises/day2.html#part-2",
    "title": "Day 2",
    "section": "Part 2",
    "text": "Part 2\n\nReinterpret your move to follow a strategy:\n\nX means LOSE, Y means DRAW, Z means WIN\n\nCreate a function that finds the piece to fulfill a strategy (WIN,LOSE or DRAW) based on the opponent piece\n\n\n\n\n\nfind_strat_piece\n\n find_strat_piece (opp_piece:str, your_strat:str)\n\nFinds the piece that matches the strategy you picked given the opponentâ€™s piece\n\n\n\n\nType\nDetails\n\n\n\n\nopp_piece\nstr\nyour opponents piece (Rock, Paper,Scissors)\n\n\nyour_strat\nstr\nyour strategy (WIN,LOSE, DRAW)\n\n\nReturns\nstr\n\n\n\n\n\n\n\n\nprint(find_strat_piece(\"Rock\",\"DRAW\"))\nprint(find_strat_piece(\"Scissors\",\"WIN\"))\nprint(find_strat_piece(\"Paper\",\"LOSE\"))\n\nRock\nRock\nRock\n\n\n\nCreate a function that computes the score for each line based on the second item being the strategy\n\n\n\n\n\nscore_strat_action\n\n score_strat_action (input:str)\n\nReturns the score given the opponents move and your strategy\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nstr\na string containing your opponentâ€™s move and your strategy separated by a space\n\n\nReturns\nint\n\n\n\n\n\n\n\n\nprint(score_strat_action(\"A Y\"))\nprint(score_strat_action(\"B X\"))\nprint(score_strat_action(\"C Z\"))\n\n4\n1\n7\n\n\n\nHideAnswer\n\n\nClick on the Answer tab to view the answer\n\n\n\ntotal_strat_score = sum([score_strat_action(l) for l in input])\nprint(f'the correct answer for part 2 is {total_strat_score}')\n\nthe correct answer for part 2 is 10334"
  }
]